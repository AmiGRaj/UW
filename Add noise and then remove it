import cv2
import numpy as np
from matplotlib import pyplot as plt

# Read an image
img = cv2.imread('input_image.jpg')  # Replace 'input_image.jpg' with your image file

# Convert the image to grayscale
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Add Gaussian noise to the image
mean = 0
variance = 100
sigma = variance ** 0.5
height, width = gray_img.shape
gaussian_noise = np.random.normal(mean, sigma, (height, width))
noisy_image = np.clip(gray_img + gaussian_noise, 0, 255).astype(np.uint8)

# Apply Fourier Transform
f = np.fft.fft2(noisy_image)
fshift = np.fft.fftshift(f)

# Create a mask (filter) to remove noise
rows, cols = noisy_image.shape
crow, ccol = rows // 2, cols // 2
mask = np.ones((rows, cols), np.uint8)
mask[crow - 30:crow + 30, ccol - 30:ccol + 30] = 0

# Apply the mask to the frequency domain representation
fshift_filtered = fshift * mask

# Inverse Fourier Transform
f_ishift = np.fft.ifftshift(fshift_filtered)
img_back = np.fft.ifft2(f_ishift)
img_back = np.abs(img_back)

# Display original, noisy, and filtered images
plt.figure(figsize=(10, 6))

plt.subplot(1, 3, 1), plt.imshow(gray_img, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 3, 2), plt.imshow(noisy_image, cmap='gray')
plt.title('Noisy Image')

plt.subplot(1, 3, 3), plt.imshow(img_back, cmap='gray')
plt.title('Filtered Image')

plt.tight_layout()
plt.show()
